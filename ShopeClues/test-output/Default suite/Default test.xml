<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="LAPTOP-NLHU7H1D" ignored="0" name="Default test" tests="34" failures="2" timestamp="18 Nov 2018 15:25:51 GMT" time="1.6" errors="0">
  <testcase name="@BeforeMethod openApp" time="0.149" classname="generics.BaseTest">
    <failure type="java.lang.IllegalStateException" message="The driver executable does not exist: C:\home\tyss\Desktop\chromedriver">
      <![CDATA[java.lang.IllegalStateException: The driver executable does not exist: C:\home\tyss\Desktop\chromedriver
at com.google.common.base.Preconditions.checkState(Preconditions.java:518)
at org.openqa.selenium.remote.service.DriverService.checkExecutable(DriverService.java:136)
at org.openqa.selenium.remote.service.DriverService.findExecutable(DriverService.java:131)
at org.openqa.selenium.chrome.ChromeDriverService.access$000(ChromeDriverService.java:32)
at org.openqa.selenium.chrome.ChromeDriverService$Builder.findDefaultExecutable(ChromeDriverService.java:137)
at org.openqa.selenium.remote.service.DriverService$Builder.build(DriverService.java:330)
at org.openqa.selenium.chrome.ChromeDriverService.createDefaultService(ChromeDriverService.java:88)
at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:158)
at generics.BaseTest.openApp(BaseTest.java:20)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:59)
at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:455)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:222)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:520)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="@BeforeMethod openApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApp -->
  <testcase name="@AfterMethod closeApp" time="0.0" classname="generics.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase name="BuyMemoryCard" time="0.0" classname="Script.ValidMemoryCardBuy">
    <skipped/>
  </testcase> <!-- BuyMemoryCard -->
  <testcase name="testMobileFullSpecification" time="0.0" classname="Script.MobileFullSpecification">
    <skipped/>
  </testcase> <!-- testMobileFullSpecification -->
  <testcase name="testShareLocation" time="0.0" classname="Script.ShareLocation">
    <skipped/>
  </testcase> <!-- testShareLocation -->
  <testcase name="testCheckNote4Reviews" time="0.0" classname="Script.CheckNote4Review">
    <skipped/>
  </testcase> <!-- testCheckNote4Reviews -->
  <testcase name="mobileAccBuy" time="0.0" classname="Script.ValidMobileAcc">
    <skipped/>
  </testcase> <!-- mobileAccBuy -->
  <testcase name="testInvalidLocation" time="0.0" classname="Script.InvalidLocation">
    <skipped/>
  </testcase> <!-- testInvalidLocation -->
  <testcase name="BuyFeaturePhone" time="0.0" classname="Script.ValidFeaturePhoneAddCart">
    <skipped/>
  </testcase> <!-- BuyFeaturePhone -->
  <testcase name="testElectronics" time="0.0" classname="Script.ElectronicsItem">
    <skipped/>
  </testcase> <!-- testElectronics -->
  <testcase name="testOffers" time="0.0" classname="Script.CheckOffers">
    <skipped/>
  </testcase> <!-- testOffers -->
  <testcase name="BuyMemoryCard" time="0.0" classname="Script.ValidUnder999Buy">
    <skipped/>
  </testcase> <!-- BuyMemoryCard -->
  <testcase name="testSearchMobiles" time="0.0" classname="Script.SearchMobiles">
    <skipped/>
  </testcase> <!-- testSearchMobiles -->
  <testcase name="BuyMemoryCard" time="0.0" classname="Script.ValidRefrenceMobile">
    <skipped/>
  </testcase> <!-- BuyMemoryCard -->
  <testcase name="testSportsShoe" time="0.0" classname="Script.SportsShoe">
    <skipped/>
  </testcase> <!-- testSportsShoe -->
  <testcase name="testBuyJeans" time="0.0" classname="Script.BuyJeans">
    <skipped/>
  </testcase> <!-- testBuyJeans -->
  <testcase name="BuyMemoryCard" time="0.0" classname="Script.ValidTabletBuy">
    <skipped/>
  </testcase> <!-- BuyMemoryCard -->
  <testcase name="BuyMemoryCard" time="0.0" classname="Script.ValidMemoryCardAddCart">
    <skipped/>
  </testcase> <!-- BuyMemoryCard -->
  <testcase name="BuyFeaturePhone" time="0.0" classname="Script.ValidFeaturePhone">
    <skipped/>
  </testcase> <!-- BuyFeaturePhone -->
  <testcase name="testDiscount" time="0.0" classname="Script.CheckDiscounts">
    <skipped/>
  </testcase> <!-- testDiscount -->
  <testcase name="testWarranty" time="0.0" classname="Script.WarrantyCheck">
    <skipped/>
  </testcase> <!-- testWarranty -->
  <testcase name="BuyPhone" time="0.0" classname="Script.ValidMobileBuy">
    <skipped/>
  </testcase> <!-- BuyPhone -->
  <testcase name="testVRGearPage" time="0.0" classname="Script.ValidVRGearAddCart">
    <skipped/>
  </testcase> <!-- testVRGearPage -->
  <testcase name="testJeansSelectionPage" time="0.0" classname="Script.ValidJeansSelect">
    <skipped/>
  </testcase> <!-- testJeansSelectionPage -->
  <testcase name="testBrandSamsung" time="0.0" classname="Script.ValidBrandSamsung">
    <skipped/>
  </testcase> <!-- testBrandSamsung -->
  <testcase name="testBrandSamsung" time="0.055" classname="Script.ValidBrandSamsungAddCart">
    <failure type="java.lang.NullPointerException">
      <![CDATA[java.lang.NullPointerException
at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:770)
at org.openqa.selenium.interactions.Actions.<init>(Actions.java:68)
at POM.HomePage.mousehover(HomePage.java:81)
at Script.ValidBrandSamsungAddCart.testBrandSamsung(ValidBrandSamsungAddCart.java:15)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- testBrandSamsung -->
  <testcase name="testReachSecure" time="0.0" classname="Script.ValidReachSecure">
    <skipped/>
  </testcase> <!-- testReachSecure -->
  <testcase name="testSamrtGadgetsBuy" time="0.001" classname="Script.ValidSmartGadgetsBuy">
    <failure type="java.lang.NullPointerException">
      <![CDATA[java.lang.NullPointerException
at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:770)
at org.openqa.selenium.interactions.Actions.<init>(Actions.java:68)
at POM.HomePage.mousehover(HomePage.java:81)
at Script.ValidSmartGadgetsBuy.testSamrtGadgetsBuy(ValidSmartGadgetsBuy.java:15)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- testSamrtGadgetsBuy -->
  <testcase name="testMensJeansSelectionPage" time="0.0" classname="Script.InvalidMensJeansSelection">
    <skipped/>
  </testcase> <!-- testMensJeansSelectionPage -->
  <testcase name="testFeedback" time="0.0" classname="Script.MyFeedback">
    <skipped/>
  </testcase> <!-- testFeedback -->
  <testcase name="testCallUs" time="0.0" classname="Script.CallUs">
    <skipped/>
  </testcase> <!-- testCallUs -->
  <testcase name="testMobileAddCart" time="0.0" classname="Script.ValidMobileAddCart">
    <skipped/>
  </testcase> <!-- testMobileAddCart -->
  <testcase name="testReachSecure" time="0.0" classname="Script.ValidReachSecureAddCart">
    <skipped/>
  </testcase> <!-- testReachSecure -->
  <testcase name="testSamrtGadgets" time="0.0" classname="Script.ValidSmartGadgetsAddCart">
    <skipped/>
  </testcase> <!-- testSamrtGadgets -->
  <testcase name="testSearchBox" time="0.0" classname="Script.SearchBox">
    <skipped/>
  </testcase> <!-- testSearchBox -->
  <testcase name="testMobAcc" time="0.0" classname="Script.ValidMobileAccAddCart">
    <skipped/>
  </testcase> <!-- testMobAcc -->
</testsuite> <!-- Default test -->
